---
openapi: 3.0.3
info:
  title: CA2
  description: API Dokumentation for CA2 opgaven
  version: 1.0.0
  contact: {}
servers:
  - url: "http://localhost"
paths:
  /ca2/api/:
    get:
      summary: Check API status
      description: Check if API is alive
      operationId: checkApiStatus
      responses:
        "200":
          description: ""
  /ca2/api/person/:
    post:
      summary: Create person
      description: Create person
      operationId: createPerson
      requestBody:
        content:
          text/plain:
            example: "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phones\": [{\n        \"number\": {{randomNumber}}\n    }],  \n    \"address\": {\n        \"street\": \"{{$randomStreetAddress}}\",\n        \"additionalInfo\": \"{{$randomCatchPhrase}}\",\n        \"cityInfo\": {\n            \"zipCode\": \"{{$randomInt}}\",\n            \"city\": \"{{$randomCity}}\"\n        }\n    },\n    \"hobbies\": [\n        {\n            \"name\": \"{{$randomJobTitle}}\",\n            \"description\": \"{{$randomJobDescriptor}}\"\n        }\n    ]\n}"
      responses:
        "200":
          description: Create simple person
          headers:
            Connection:
              schema:
                type: string
                example: close
            Content-Length:
              schema:
                type: string
                example: "45"
            Date:
              schema:
                type: string
                example: "Mon, 22 Mar 2021 13:47:46 GMT"
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: object
                    properties: {}
                  email:
                    type: string
                    example: Rowena_Erdman69@hotmail.com
                  firstName:
                    type: string
                    example: Jacynthe
                  hobbies:
                    type: array
                    items: {}
                    example: []
                  id:
                    type: number
                    example: 38
                  lastName:
                    type: string
                    example: Beer
                  phones:
                    type: array
                    items: {}
                    example: []
              examples:
                Create simple person:
                  value:
                    address: {}
                    email: Rowena_Erdman69@hotmail.com
                    firstName: Jacynthe
                    hobbies: []
                    id: 38
                    lastName: Beer
                    phones: []
  /ca2/api/person/32:
    get:
      summary: Get person by ID
      description: Get a person object by ID
      operationId: getPersonById
      parameters:
        - name: ""
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Get person by ID
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: "309"
            Date:
              schema:
                type: string
                example: "Wed, 24 Mar 2021 12:26:06 GMT"
            Keep-Alive:
              schema:
                type: string
                example: timeout=20
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: object
                    properties:
                      additionalInfo:
                        type: string
                        example: sort kasse
                      cityInfo:
                        nullable: true
                        example: ~
                      id:
                        type: number
                        example: 10
                      street:
                        type: string
                        example: Teasden 112
                  email:
                    type: string
                    example: abcdef@vasds.dk
                  firstName:
                    type: string
                    example: asdf
                  hobbies:
                    type: array
                    items: {}
                    example: []
                  id:
                    type: number
                    example: 13
                  lastName:
                    type: string
                    example: ghhj
                  phones:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          nullable: true
                          example: ~
                        number:
                          type: number
                          example: 14123144
                    example:
                      - description: ~
                        number: 14123144
              examples:
                Get person by ID:
                  value:
                    address:
                      additionalInfo: sort kasse
                      cityInfo: ~
                      id: 10
                      street: Teasden 112
                    email: abcdef@vasds.dk
                    firstName: asdf
                    hobbies: []
                    id: 13
                    lastName: ghhj
                    phones:
                      - description: ~
                        number: 14123144
tags: []